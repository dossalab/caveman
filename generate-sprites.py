import re
import sys
from PIL import Image
from argparse import ArgumentParser
from os.path import join as pathjoin

VIDEO_BIT_PORT = 'PORTD'
VIDEO_BIT_PIN = 7

def path_to_identifier(path: str):
     return re.sub(r"[\/\.,-]", "_", path)

def is_power_of_two(n):
    return n != 0 and (n & (n - 1)) == 0

def add_header_entry(identifier, file):
    print(f'extern void {identifier}(void);', file=file)

def add_asm_entry(identifier, pixels, width, height, file):
    print(f'.global {identifier}\n{identifier}:', file=file)
    for y in range(height):
        print(f'; row {y}', file=file)

        for x in range(width):
            # clear or set bit depending on our pixel value
            command = 'sbi' if pixels[x, y] > 127 else 'cbi'
            print(f'    {command} _SFR_IO_ADDR({VIDEO_BIT_PORT}), {VIDEO_BIT_PIN}', file=file)

        print('    ret', file=file)

p = ArgumentParser()
p.add_argument('--basedir', type=str, required=True)
p.add_argument('--input', type=str, required=True, action='append')
args = p.parse_args()

with open('generated-sprites.S', 'w') as source:
    with open('generated-sprites.h', 'w') as header:
        print('// Autogenerated file - DO NOT EDIT\n', file=header)
        print('; Autogenerated file - DO NOT EDIT\n\n#include <avr/io.h>\n.text\n', file=source)

        for path in args.input:
            image = Image.open(pathjoin(args.basedir, path)).convert("L")
            width, height = image.size

            if not is_power_of_two(width + 1):
                print('image height must be any power of 2 minus 1, i.e (3, 7, 15)', file=sys.stderr)
                continue

            identifier = f'sprites_{path_to_identifier(path)}_{width}x{height}_start'

            add_header_entry(identifier, header)
            add_asm_entry(identifier, image.load(), width, height, source)
