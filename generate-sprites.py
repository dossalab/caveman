import re
import sys
from PIL import Image
from argparse import ArgumentParser
from os.path import join as pathjoin
from dataclasses import dataclass
from typing import Any
from textwrap import dedent

VIDEO_BIT_PORT = 'PORTD'
VIDEO_BIT_PIN = 7

@dataclass
class SpriteProto:
    identifier: str
    width: int
    height: int
    pixels: Any

def path_to_identifier(path: str):
     return re.sub(r"[\/\.,-]", "_", path)

def is_even(n):
    return n % 2 == 0

class Formatter:
    def __init__(self, file):
        self.file = file

    def out(self, a: str, correct_indent=True):
        print(dedent(a) if correct_indent else a, file=self.file)

    def add_header_entry(self, sprite: SpriteProto):
        self.out(f'''\
            extern void {sprite.identifier}_data(void);
            const struct sprite_proto {sprite.identifier}_proto = {{
                .width = {sprite.width},
                .height = {sprite.height},
                .stride = {(sprite.width + 1) // 2},
                .data_start = (uint16_t*){sprite.identifier}_data
            }};
            ''')

    def add_source_entry(self, sprite: SpriteProto):
        self.out(f'''\
            .global {sprite.identifier}_data
            {sprite.identifier}_data:''')

        for y in range(sprite.height):
            self.out(f'; row {y}')

            for x in range(sprite.width):
                # clear or set bit depending on our pixel value
                command = 'sbi' if sprite.pixels[x, y] > 127 else 'cbi'
                self.out(f'    {command} _SFR_IO_ADDR({VIDEO_BIT_PORT}), {VIDEO_BIT_PIN}', correct_indent=False)

            self.out('    ret', correct_indent=False)

    def write_source_preamble(self):
        self.out('''\
            ; Autogenerated file - DO NOT EDIT

            #include <avr/io.h>

            .text
            ''')

    def write_header_preamble(self):
        self.out('''\
            // Autogenerated file - DO NOT EDIT

            #pragma once

            #include "video.h"
            ''')

def parse_args():
    p = ArgumentParser()

    p.add_argument('--basedir', type=str, required=True)
    p.add_argument('--input', type=str, required=True, action='append')

    return p.parse_args()

def main():
    args = parse_args()

    with open('generated-sprites.S', 'w') as source_file, open('generated-sprites.h', 'w') as header_file:
        source = Formatter(source_file)
        header = Formatter(header_file)

        source.write_source_preamble()
        header.write_header_preamble()

        for path in args.input:
            image = Image.open(pathjoin(args.basedir, path)).convert("L")
            width, height = image.size

            if not is_even(width + 1): # 1 is a padding for ret instruction
                print(f'{path}: width must be odd, detected width is {width}', file=sys.stderr)
                continue

            sprite = SpriteProto(
                identifier=path_to_identifier(path),
                width=width,
                height=height,
                pixels=image.load()
            )

            header.add_header_entry(sprite)
            source.add_source_entry(sprite)

if __name__ == '__main__':
    main()
