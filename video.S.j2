{# This is a jinja2 template for auto-generating assembly file. Yeah #}

// This is autogenerated file - DO NOT EDIT

#include <avr/interrupt.h>
#include <avr/io.h>

#include "video-internal.h"

.extern video_line_counter
.extern video_buffer

#define NORMAL_SCANLINES 2

// Start of the scanline interrupt
.global TIMER2_COMP_vect
TIMER2_COMP_vect:
    // First check where the sync pulse bit is.
    // If it's the first occurence of this interrupt (sync bit is asserted), just reset it back and return
    // This part does not modify SREG or registers, so we're good

    sbic _SFR_IO_ADDR(VIDEO_PORT), VIDEO_SYNC_BIT
    rjmp start_scanline

    // Sync bit asserted (we're outputting a sync pulse) -> deassert
    sbi _SFR_IO_ADDR(VIDEO_PORT), VIDEO_SYNC_BIT
    reti

    // Sync bit is not asserted
    // So we know we completed the sync pulse and back porch. We can start drawing now
start_scanline:
    push r16

    // Stop the timer, as we're gonna block the execution for the next ~52 us
    ldi r16, VIDEO_TIMER_VALUE_STOP
    out _SFR_IO_ADDR(TCCR2), r16

    in r16, _SFR_IO_ADDR(SREG)
    push r16
    push r30
    push r31

    // We can check the video line counter first
    lds r16, video_line_counter
    inc r16
    sts video_line_counter, r16

    // And if it is less than NORMAL_SCANLINES, draw normal scanlines
    // XXX: These conditionals and jumps delay us a bit.
    // It would make more sense to draw normal scanlines here.
    // But brlo cannot jump more than ~63 words, so our unwinded loop here bites us in the ass
    ldi r30, NORMAL_SCANLINES
    cp r16, r30
    brlo do_normal_scanline

do_blanking_scanline:
    ldi r16, {{ line_buffer_size + 2 }}
blanking_scanline_loop:
    dec r16
    brne blanking_scanline_loop

finish_scanline:
    // End of video, front porch starts here. We don't need Z and SREG anymore
    pop r31
    pop r30
    pop r16
    out _SFR_IO_ADDR(SREG), r16

    // End of front porch
    cbi _SFR_IO_ADDR(VIDEO_PORT), VIDEO_SYNC_BIT

    // Prepare to start a next line, so run a timer again
    ldi r16, VIDEO_TIMER_VALUE_START
    out _SFR_IO_ADDR(TCCR2), r16

    pop r16
    reti

do_normal_scanline:
    ldi r30, lo8(video_buffer)
    ldi r31, hi8(video_buffer)

    // We use that sort of loop unwinding here to make it extra fast, each of these takes 3 cycles
{%- for i in range(line_buffer_size) %}
    ld r16, Z+      ; data[{{ i }}]
    out _SFR_IO_ADDR(PORTD), r16    ; PORTD = data[{{ i }}]
{%- endfor %}

    // XXX: Make sure video bit is cleared
    cbi _SFR_IO_ADDR(PORTD), 7

    rjmp finish_scanline
